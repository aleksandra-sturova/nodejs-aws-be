service: nodejs-aws-import-product-service
frameworkVersion: '2'

plugins:
  - serverless-webpack

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules:
      forceInclude:
        - csv-parser
        - aws-sdk
        - node-fetch
    keepOutputDirectory: true
    packager: 'yarn'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1
  environment:
    SQS_URL:
      Ref: catalogItemsQueue
    SNS_ARN:
      Ref: createProductTopic

  iamRoleStatements:
    - Effect: "Allow"
      Action: "s3:ListBucket"
      Resource: "arn:aws:s3:::nodejs-aws-import-product-service"
    - Effect: "Allow"
      Action: "s3:*"
      Resource: "arn:aws:s3:::nodejs-aws-import-product-service/*"
    - Effect: "Allow"
      Action: "sqs:*"
      Resource:
        - Fn::GetAtt: [catalogItemsQueue, Arn]
    - Effect: "Allow"
      Action: "sns:*"
      Resource:
        - Ref: createProductTopic

resources:
  Resources:
    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalog-items-sqs
    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: create-product-topic
    createProductTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: alexandra.sturova@gmail.com
        Protocol: email
        TopicArn:
          Ref: createProductTopic
    createProductTopicSubscriptionFiltered:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: alexsandra1313@gmail.com
        Protocol: email
        TopicArn:
          Ref: createProductTopic
        FilterPolicy:
          count: [{ numeric: ['>', 1] }]

functions:
  importProductsFile:
    handler: handler.importProductsFile
    events:
      - http:
          path: /import
          method: get
          cors: true
  importFileParser:
    handler: handler.importFileParser
    events:
      - s3:
          bucket: 'nodejs-aws-import-product-service'
          event: 's3:ObjectCreated:*'
          rules:
            - prefix: uploaded/
          existing: true
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt: [catalogItemsQueue, Arn]
